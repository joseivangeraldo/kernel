To debug an executable (.exe) file in GDB, you first need to tell GDB the name of the executable.
Then, you can run the program under GDB's control, setting breakpoints and examining the program's state. 

1. Start GDB with the executable:
Open a terminal and type gdb [executable_name] where [executable_name] is the name of your .exe file (e.g., gdb my_program.exe). 

2. Specify the executable (if not on the command line):
If you didn't specify the executable on the command line, you can use the file command inside GDB: (gdb) file [executable_name]. 
You can also use the exec-file command, which is essentially a combination of exec and symbol-file: (gdb) exec-file [executable_name]. 
If you need to debug a program that's being run from a script, you can use the exec command to replace the current process with the executable being debugged, according to Red Hat Developers. 

3. Start the program:
Once the executable is loaded, use the run command to start the program under GDB's control: (gdb) run. 
If your program requires command-line arguments, you can specify them with the run command: (gdb) run [arguments]. 

4. Set breakpoints:
To stop the program at a specific line of code, use the break command: (gdb) break [line_number], according to UMIACS. 
You can also set breakpoints on function names: (gdb) break [function_name]. 

5. Inspect the program's state:
Once the program stops at a breakpoint, you can examine variables and memory using commands like info, print, and x, according to UMIACS. 
You can also step through the code line by line using the step command or jump to the next instruction using the next command, according to UMIACS. 

6. Continue execution:
To continue the program's execution after examining its state, use the continue (or c) command: (gdb) continue. 

7. Quit GDB:
To exit GDB and return to the shell, use the quit command: (gdb) quit. 

EXAMINE MEMORY: x/FMT ADDRESS.
ADDRESS is an expression for the memory address to examine.
FMT is a repeat count followed by a format letter and a size letter.

Format letters are o(octal), x(hex), d(decimal), u(unsigned decimal),
t(binary), f(float), a(address), i(instruction), c(char), s(string)
and z(hex, zero padded on the left).

Size letters are b(byte), h(halfword), w(word), g(giant, 8 bytes).
The specified number of objects of the specified size are printed
according to the format.  If a negative number is specified, memory is
examined backward from the address.

Defaults for format and size letters are those previously used.
Default count is 1.  Default address is following last thing printed
with this command or "print".

$ gdb ./DataTypes -q
(gdb) set disassembly-flavor intel
(gdb) break _start
Breakpoint 1 at 0x401000

(gdb) run
(gdb) disassemble
(gdb) info variables
All defined variables:
0x0000000000402000  hello_world
0x0000000000402022  var1
0x0000000000402024  var2
0x0000000000402026  var3
0x000000000040202a  var4
0x0000000000402032  repeat_buffer
0x00000000004020b2  __bss_start
0x00000000004020b2  _edata
0x00000000004020b4  buffer
0x00000000004020f8  _end
(gdb) 

(gdb) x/2xb &var1
0x402022:       0x11    0x22
(gdb) x/xh &var2
0x402024:       0x3344
(gdb) x/xw &var3
0x402026:       0xaabbccdd
(gdb) 
0x40202a:       0x11223344
(gdb) 
0x40202e:       0xaabbccdd
(gdb) 
0x402032:       0xaaaaaaaa
(gdb) x/xg &var4
0x40202a:       0xaabbccdd11223344
(gdb) x/128xb &repeat_buffer
0x402032:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40203a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402042:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40204a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402052:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40205a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402062:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40206a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402072:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40207a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402082:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40208a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402092:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40209a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x4020a2:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x4020aa:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa

(gdb) x/64xb &buffer
0x4020b4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020bc:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020c4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020cc:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020d4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020dc:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020e4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020ec:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00

####################################################################################

ENDIANES:
$ nasm -felf64 Endian.nasm -o Endian.o
$ ld -o Endian Endian.o

gitpod /workspace/kernel/pentesteracadem (main) $ ./Endian 
Hello World to the SLAE-64 Course
gitpod /workspace/kernel/pentesteracadem (main) $ gdb -q ./Endian
Reading symbols from ./Endian...
(No debugging symbols found in ./Endian)
(gdb) set disassembly-flavor intel
(gdb) break _start
Breakpoint 1 at 0x401000
(gdb) run
Starting program: /workspace/kernel/pentesteracadem/Endian 
warning: Error disabling address space randomization: Operation not permitted

Breakpoint 1, 0x0000000000401000 in _start ()
(gdb) disassemble
Dump of assembler code for function _start:
=> 0x0000000000401000 <+0>:     mov    eax,0x1
   0x0000000000401005 <+5>:     mov    edi,0x1
   0x000000000040100a <+10>:    movabs rsi,0x402000
   0x0000000000401014 <+20>:    mov    edx,0x22
   0x0000000000401019 <+25>:    syscall 
   0x000000000040101b <+27>:    mov    rax,QWORD PTR ds:0x402022
   0x0000000000401023 <+35>:    mov    rbx,QWORD PTR ds:0x40202a
   0x000000000040102b <+43>:    mov    eax,0x3c
   0x0000000000401030 <+48>:    mov    edi,0xb
   0x0000000000401035 <+53>:    syscall 
End of assembler dump.
(gdb) info variables
All defined variables:

Non-debugging symbols:
0x0000000000402000  hello_world
0x0000000000402022  var1
0x000000000040202a  var2
0x0000000000402032  __bss_start
0x0000000000402032  _edata
0x0000000000402038  _end

(gdb) x/8xb &var1
0x402022:       0x11    0x22    0x33    0x44    0x55    0x66    0x77    0x88
(gdb) x/8h &var1
0x402022:       0x2211  0x4433  0x6655  0x8877  0x7788  0x5566  0x3344  0x1122
(gdb) x/xh &var1
0x402022:       0x2211
(gdb) x/xw &var1
0x402022:       0x44332211
(gdb) x/xg &var1
0x402022:       0x8877665544332211
(gdb) x/xg &var2
0x40202a:       0x1122334455667788
(gdb) disassemble
Dump of assembler code for function _start:
=> 0x0000000000401000 <+0>:     mov    eax,0x1
   0x0000000000401005 <+5>:     mov    edi,0x1
   0x000000000040100a <+10>:    movabs rsi,0x402000
   0x0000000000401014 <+20>:    mov    edx,0x22
   0x0000000000401019 <+25>:    syscall 
   0x000000000040101b <+27>:    mov    rax,QWORD PTR ds:0x402022
   0x0000000000401023 <+35>:    mov    rbx,QWORD PTR ds:0x40202a
   0x000000000040102b <+43>:    mov    eax,0x3c
   0x0000000000401030 <+48>:    mov    edi,0xb
   0x0000000000401035 <+53>:    syscall 
End of assembler dump.
(gdb) break *rip+27
No symbol table is loaded.  Use the "file" command.
(gdb) break *$rip+27
Breakpoint 2 at 0x40101b
(gdb) c
Continuing.
Hello World to the SLAE-64 Course

Breakpoint 2, 0x000000000040101b in _start ()
(gdb) disassemble
Dump of assembler code for function _start:
   0x0000000000401000 <+0>:     mov    eax,0x1
   0x0000000000401005 <+5>:     mov    edi,0x1
   0x000000000040100a <+10>:    movabs rsi,0x402000
   0x0000000000401014 <+20>:    mov    edx,0x22
   0x0000000000401019 <+25>:    syscall 
=> 0x000000000040101b <+27>:    mov    rax,QWORD PTR ds:0x402022
   0x0000000000401023 <+35>:    mov    rbx,QWORD PTR ds:0x40202a
   0x000000000040102b <+43>:    mov    eax,0x3c
   0x0000000000401030 <+48>:    mov    edi,0xb
   0x0000000000401035 <+53>:    syscall 
End of assembler dump.
(gdb) info registers
rax            0x22                34
rbx            0x0                 0
rcx            0x40101b            4198427
rdx            0x22                34
rsi            0x402000            4202496
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fff01d7ab90      0x7fff01d7ab90
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x202               514
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0x40101b            0x40101b <_start+27>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) nexti
0x0000000000401023 in _start ()
(gdb) disassemble
Dump of assembler code for function _start:
   0x0000000000401000 <+0>:     mov    eax,0x1
   0x0000000000401005 <+5>:     mov    edi,0x1
   0x000000000040100a <+10>:    movabs rsi,0x402000
   0x0000000000401014 <+20>:    mov    edx,0x22
   0x0000000000401019 <+25>:    syscall 
   0x000000000040101b <+27>:    mov    rax,QWORD PTR ds:0x402022
=> 0x0000000000401023 <+35>:    mov    rbx,QWORD PTR ds:0x40202a
   0x000000000040102b <+43>:    mov    eax,0x3c
   0x0000000000401030 <+48>:    mov    edi,0xb
   0x0000000000401035 <+53>:    syscall 
End of assembler dump.
(gdb) info registers
rax            0x8877665544332211  -8613303245920329199
rbx            0x0                 0
rcx            0x40101b            4198427
rdx            0x22                34
rsi            0x402000            4202496
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fff01d7ab90      0x7fff01d7ab90
r8             0x0                 0
r9             0


x0                 0
r10            0x0                 0
r11            0x202               514
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0x401023            0x401023 <_start+35>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) nexti
0x000000000040102b in _start ()
(gdb) info registers
rax            0x8877665544332211  -8613303245920329199
rbx            0x1122334455667788  1234605616436508552
rcx            0x40101b            4198427
rdx            0x22                34
rsi            0x402000            4202496
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fff01d7ab90      0x7fff01d7ab90
r8             0x0                 0
r9             0x0                 0
r10            0x0                 0
r11            0x202               514
r12            0x0                 0
r13            0x0                 0
r14            0x0                 0
r15            0x0                 0
rip            0x40102b            0x40102b <_start+43>
eflags         0x202               [ IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
(gdb) 
#######################################################################################
EXEMPLO USAR GDB TUI:

$ gdb -q ./HelloWorld -tui
(gdb)set disassembly-flavor intel
(gdb)break _start
(gdb)run
(gdb)layout asm
(gdb)layout regs
(gdb)stepi
ENTER,ENTER,ENTER till the end of app.


INTEL MANUALS:
https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html


COMPILAÇÃO PROFISSIONAL:
Oficial : https://www.gnu.org/software/make/manual/make.html

echo 		@echo "Ola Mundo! :)"  --> Uma exibição silenciosa, não exibe o comando
só exibe a saida

$ make -n --> para ver as variaveis que vão ser executadas, sem executar o programa

VER PROCESSOS NO COMPUTADOR:
$ ps ux
INTEL MANUALS:
https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html

$ gdb ./gdb_test 
(gdb) set disassembly-flavor intel
(gdb) disassemble main

PROGRAMMING ASSEMBLY:
http://nasm.us
OPÇÕES AT&T AND INTEL SINTAX

SYSCALL LINUX KERNEL TABLE , RESEARCH

INVOKING SYSTEM CALL WITH SYSCALL:
RAX - System Call Number
RDI - 1st Argument
RSI - 2nd Argument
RDX - 3rd Argument
R10 - 4th Argument
R8  - 5th Argument
R9  - 6th Argument

