video from https://www.youtube.com/watch?v=8rncBCVySEw&t=1197s

Low Level programming language
Comunicate with microprocessor

INSTALANDO PROGRAMAS NECESSARIOS:
    $ sudo apt install nasm build-essential
    AGORA TEMOS NASM E LD INSTALADOS.
LINK CONSULTA:
https://shell-storm.org/
https://shell-storm.org/shellcode/files/shellcode-78.php

$ nasm -f elf64 demo.asm -o demo.o
$ ld demo.o -o demo
ld: warning: cannot find entry symbol _start; defaulting to 0000000000401000

$ sudo apt install net-tools --> para usar o comando netstat

$ netstat -nlt
tcp        0      0 0.0.0.0:4444            0.0.0.0:*               LISTEN     

sudo apt install netcat-traditional  --> para INSTALAR PACOTE NC - Network connect
$ nc localhost 4444

EXIBIR O ARQUIVO OBJEO EM CODIGO FONTE:
$ objdump -D -M intel demo.o

EXTRACTING CPU INFORMATION:
INTEL - ARM - MIPS
$ lscpu

$ cat /proc/cpuinfo
Important in the combo flags have the itens: mmx , lm

GDB YOUR BEST FRIEND:
$ gdb
(gdb) 

$ make test_gdb
$ pico test_gdb.c --> abre este editor
gitpod /workspace/kernel/pentesteracadem (main) $ gdb ./gdb_test
(gdb) run hello
(gdb) run PentesterAcademyPass

SOLUTION FROM GDB PROBLEM:
$ gdb -q gdb_test
(No debugging symbols found in gdb_test)
SOLUÇÃO RECOMPILAR NOVAMENTE COM SIMBOLOS GDB:
$ gcc -ggdb gdb_test.c -o gdb_test
APÓS FICA ASSIM:
Reading symbols from gdb_test...
(gdb) list --> exibe o codigo fonte

gitpod /workspace/kernel/pentesteracadem (main) $ gdb -q gdb_test
Reading symbols from gdb_test...
(gdb) list
1       #include<stdio.h>
2       #include<string.h>
3
4       int main(int argc, char **argv)
5       {
6           char *p = "PentesterAcademyPass";
7
8           if (strcmp(argv[1], p) == 0)
9           {
10              printf("\nWelcome to the SLAE 64-bit course! Please proceed to the next video!\n");
(gdb) 
11          }
12          else
13          {
14              printf("\nTime to review those GDB videos again!\n");
15          }
16          return 0;
17      }
(gdb) break 8
Breakpoint 1 at 0x1187: file gdb_test.c, line 8.
(gdb) run hello
Starting program: /workspace/kernel/pentesteracadem/gdb_test hello
warning: Error disabling address space randomization: Operation not permitted
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main (argc=2, argv=0x7ffd23d81878) at gdb_test.c:8
8           if (strcmp(argv[1], p) == 0)
(gdb) print argv[1]
$1 = 0x7ffd23d82067 "hello"
(gdb) print p
$2 = 0x55ebd9fc5008 "PentesterAcademyPass"
(gdb) set variable p = argv[1]
(gdb) print p
$3 = 0x7ffd23d82067 "hello"
(gdb) c
Continuing.

Welcome to the SLAE 64-bit course! Please proceed to the next video!
[Inferior 1 (process 14885) exited normally]

Reading symbols from gdb_test...
(gdb) disassemble main

GENERAL PURPOSE REGISTER:
$ nasm -felf64 HelloWorld.nasm -o HelloWorld.o
$ ld HelloWorld.o -o HelloWorld 

REDUZE INSTRUCTION SIZE 
REMOVE NULLS
$ cp HelloWorld.nasm HelloWorld-small.nasm

$ objdump -M intel -d HelloWorld
 401000:       b8 01 00 00 00          mov    eax,0x1 

$ nasm -f elf64 HelloWorld-small.nasm -o HelloWorld-small.o
$ ld HelloWorld-small.o -o HelloWorld-small

$ objdump -M intel -d HelloWorld-small.o
 0:   b0 01                   mov    al,0x1

 SAFE MODE:
 $ cp HelloWorld.nasm HelloWorld-shellcodesafe.nasm
 MUDOU ISTO:
 _start:

	;print on screen
	xor rax,	rax
	mov al,		1

$ nasm -f elf64 HelloWorld-shellcodesafe.nasm -o HelloWorld-shellcodesafe.o
$ ld HelloWorld-shellcodesafe.o -o HelloWorld-shellcodesafe

$ objdump -M intel -d HelloWorld-shellcodesafe
0000000000401000 <_start>:
  401000:       48 31 c0                xor    rax,rax
  401003:       b0 01                   mov    al,0x1
 
 

SPCIAL TOKENS:
$ - Evaluates for current line
$$ - Evaluate for beginning of current section

$ nasm -f elf64 DataTypes.nasm -o DataTypes.o
$ ld DataTypes.o -o DataTypes

$ gdb ./DataTypes -q
(gdb) set disassembly-flavor intel
(gdb) break _start
Breakpoint 1 at 0x401000
(gdb) run
(gdb) disassemble
(gdb) info variables
All defined variables:
0x0000000000402000  hello_world
0x0000000000402022  var1
0x0000000000402024  var2
0x0000000000402026  var3
0x000000000040202a  var4
0x0000000000402032  repeat_buffer
0x00000000004020b2  __bss_start
0x00000000004020b2  _edata
0x00000000004020b4  buffer
0x00000000004020f8  _end
(gdb) 

(gdb) x/2xb &var1
0x402022:       0x11    0x22
(gdb) x/xh &var2
0x402024:       0x3344
(gdb) x/xw &var3
0x402026:       0xaabbccdd
(gdb) 
0x40202a:       0x11223344
(gdb) 
0x40202e:       0xaabbccdd
(gdb) 
0x402032:       0xaaaaaaaa
(gdb) x/xg &var4
0x40202a:       0xaabbccdd11223344
(gdb) x/128xb &repeat_buffer
0x402032:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40203a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402042:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40204a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402052:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40205a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402062:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40206a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402072:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40207a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402082:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40208a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x402092:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x40209a:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x4020a2:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa
0x4020aa:       0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa    0xaa

(gdb) x/64xb &buffer
0x4020b4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020bc:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020c4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020cc:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020d4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020dc:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020e4:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00
0x4020ec:       0x00    0x00    0x00    0x00    0x00    0x00    0x00    0x00

IMPORTANTE 1:25:20  Até   1:34:37

Para remover tabulações ou espaços em branco do código no VS Code, pode usar a funcionalidade
 de substituir texto com expressões 
regulares. Pressione Ctrl+H (ou Cmd+Shift+H no macOS), selecione "Usar Expressão Regular",
 e substitua o padrão ^(\\s)*$ (para linhas em branco) ou \t (para tabulações) por nad

 1º Atalho do VS Code: Copy line up/down

    Shift + Alt + ↓/↑ 

2º Atalho: Move line up/down

    Alt + ↓/↑ 

3º Atalho: Indent/outdent line

    Ctrl + ] / [ 

4º Atalho: Insert cursor

    Alt + Click

5º Atalho: Add selection to next Find match

    Ctrl + D

6º Atalho: Rename Symbol

    F2



COMPILAÇÃO PROFISSIONAL:
Oficial : https://www.gnu.org/software/make/manual/make.html

echo 		@echo "Ola Mundo! :)"  --> Uma exibição silenciosa, não exibe o comando
só exibe a saida

$ make -n --> para ver as variaveis que vão ser executadas, sem executar o programa

VER PROCESSOS NO COMPUTADOR:
$ ps ux
INTEL MANUALS:
https://www.intel.com/content/www/us/en/developer/articles/technical/intel-sdm.html

$ gdb ./gdb_test 
(gdb) set disassembly-flavor intel
(gdb) disassemble main

PROGRAMMING ASSEMBLY:
http://nasm.us
OPÇÕES AT&T AND INTEL SINTAX

SYSCALL LINUX KERNEL TABLE , RESEARCH

INVOKING SYSTEM CALL WITH SYSCALL:
RAX - System Call Number
RDI - 1st Argument
RSI - 2nd Argument
RDX - 3rd Argument
R10 - 4th Argument
R8  - 5th Argument
R9  - 6th Argument


