video from https://www.youtube.com/watch?v=8rncBCVySEw&t=1197s

Low Level programming language
Comunicate with microprocessor

INSTALANDO PROGRAMAS NECESSARIOS:
    $ sudo apt install nasm build-essential
    AGORA TEMOS NASM E LD INSTALADOS.
LINK CONSULTA:
https://shell-storm.org/
https://shell-storm.org/shellcode/files/shellcode-78.php

$ nasm -f elf64 demo.asm -o demo.o
$ ld demo.o -o demo
ld: warning: cannot find entry symbol _start; defaulting to 0000000000401000

$ sudo apt install net-tools --> para usar o comando netstat

$ netstat -nlt
tcp        0      0 0.0.0.0:4444            0.0.0.0:*               LISTEN     

sudo apt install netcat-traditional  --> para INSTALAR PACOTE NC - Network connect
$ nc localhost 4444

EXIBIR O ARQUIVO OBJEO EM CODIGO FONTE:
$ objdump -D -M intel demo.o

EXTRACTING CPU INFORMATION:
INTEL - ARM - MIPS
$ lscpu

$ cat /proc/cpuinfo
Important in the combo flags have the itens: mmx , lm

GDB YOUR BEST FRIEND:
$ gdb
(gdb) 

$ make test_gdb
$ pico test_gdb.c --> abre este editor
gitpod /workspace/kernel/pentesteracadem (main) $ gdb ./gdb_test
(gdb) run hello
(gdb) run PentesterAcademyPass

SOLUTION FROM GDB PROBLEM:
$ gdb -q gdb_test
(No debugging symbols found in gdb_test)
SOLUÇÃO RECOMPILAR NOVAMENTE COM SIMBOLOS GDB:
$ gcc -ggdb gdb_test.c -o gdb_test
APÓS FICA ASSIM:
Reading symbols from gdb_test...
(gdb) list --> exibe o codigo fonte

gitpod /workspace/kernel/pentesteracadem (main) $ gdb -q gdb_test
Reading symbols from gdb_test...
(gdb) list
1       #include<stdio.h>
2       #include<string.h>
3
4       int main(int argc, char **argv)
5       {
6           char *p = "PentesterAcademyPass";
7
8           if (strcmp(argv[1], p) == 0)
9           {
10              printf("\nWelcome to the SLAE 64-bit course! Please proceed to the next video!\n");
(gdb) 
11          }
12          else
13          {
14              printf("\nTime to review those GDB videos again!\n");
15          }
16          return 0;
17      }
(gdb) break 8
Breakpoint 1 at 0x1187: file gdb_test.c, line 8.
(gdb) run hello
Starting program: /workspace/kernel/pentesteracadem/gdb_test hello
warning: Error disabling address space randomization: Operation not permitted
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main (argc=2, argv=0x7ffd23d81878) at gdb_test.c:8
8           if (strcmp(argv[1], p) == 0)
(gdb) print argv[1]
$1 = 0x7ffd23d82067 "hello"
(gdb) print p
$2 = 0x55ebd9fc5008 "PentesterAcademyPass"
(gdb) set variable p = argv[1]
(gdb) print p
$3 = 0x7ffd23d82067 "hello"
(gdb) c
Continuing.

Welcome to the SLAE 64-bit course! Please proceed to the next video!
[Inferior 1 (process 14885) exited normally]

Reading symbols from gdb_test...
(gdb) disassemble main

GENERAL PURPOSE REGISTER:
$ nasm -felf64 HelloWorld.nasm -o HelloWorld.o
$ ld HelloWorld.o -o HelloWorld 

REDUZE INSTRUCTION SIZE 
REMOVE NULLS
$ cp HelloWorld.nasm HelloWorld-small.nasm
$ objdump -M intel -d HelloWorld

Para remover tabulações ou espaços em branco do código no VS Code, pode usar a funcionalidade
 de substituir texto com expressões 
regulares. Pressione Ctrl+H (ou Cmd+Shift+H no macOS), selecione "Usar Expressão Regular",
 e substitua o padrão ^(\\s)*$ (para linhas em branco) ou \t (para tabulações) por nad

 1º Atalho do VS Code: Copy line up/down

    Shift + Alt + ↓/↑ 

2º Atalho: Move line up/down

    Alt + ↓/↑ 

3º Atalho: Indent/outdent line

    Ctrl + ] / [ 

4º Atalho: Insert cursor

    Alt + Click

5º Atalho: Add selection to next Find match

    Ctrl + D

6º Atalho: Rename Symbol

    F2
