video from https://www.youtube.com/watch?v=8rncBCVySEw&t=1197s

Low Level programming language
Comunicate with microprocessor

INSTALANDO PROGRAMAS NECESSARIOS:
    $ sudo apt install nasm build-essential
    AGORA TEMOS NASM E LD INSTALADOS.
LINK CONSULTA:
https://shell-storm.org/
https://shell-storm.org/shellcode/files/shellcode-78.php

$ nasm -f elf64 demo.asm -o demo.o
$ ld demo.o -o demo
ld: warning: cannot find entry symbol _start; defaulting to 0000000000401000

$ sudo apt install net-tools --> para usar o comando netstat

$ netstat -nlt
tcp        0      0 0.0.0.0:4444            0.0.0.0:*               LISTEN     

sudo apt install netcat-traditional  --> para INSTALAR PACOTE NC - Network connect
$ nc localhost 4444

EXIBIR O ARQUIVO OBJEO EM CODIGO FONTE:
$ objdump -D -M intel demo.o

EXTRACTING CPU INFORMATION:
INTEL - ARM - MIPS
$ lscpu

$ cat /proc/cpuinfo
Important in the combo flags have the itens: mmx , lm

GDB YOUR BEST FRIEND:
$ gdb
(gdb) 

$ make test_gdb
$ pico test_gdb.c --> abre este editor
gitpod /workspace/kernel/pentesteracadem (main) $ gdb ./gdb_test
(gdb) run hello
(gdb) run PentesterAcademyPass

SOLUTION FROM GDB PROBLEM:
$ gdb -q gdb_test
(No debugging symbols found in gdb_test)
SOLUÇÃO RECOMPILAR NOVAMENTE COM SIMBOLOS GDB:
$ gcc -ggdb gdb_test.c -o gdb_test
APÓS FICA ASSIM:
Reading symbols from gdb_test...
(gdb) list --> exibe o codigo fonte
(gdb)

gitpod /workspace/kernel/pentesteracadem (main) $ gdb -q gdb_test
Reading symbols from gdb_test...
(gdb) list
1       #include<stdio.h>
2       #include<string.h>
3
4       int main(int argc, char **argv)
5       {
6           char *p = "PentesterAcademyPass";
7
8           if (strcmp(argv[1], p) == 0)
9           {
10              printf("\nWelcome to the SLAE 64-bit course! Please proceed to the next video!\n");
(gdb) 
11          }
12          else
13          {
14              printf("\nTime to review those GDB videos again!\n");
15          }
16          return 0;
17      }
(gdb) break 8
Breakpoint 1 at 0x1187: file gdb_test.c, line 8.
(gdb) run hello
Starting program: /workspace/kernel/pentesteracadem/gdb_test hello
warning: Error disabling address space randomization: Operation not permitted
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 1, main (argc=2, argv=0x7ffd23d81878) at gdb_test.c:8
8           if (strcmp(argv[1], p) == 0)
(gdb) print argv[1]
$1 = 0x7ffd23d82067 "hello"
(gdb) print p
$2 = 0x55ebd9fc5008 "PentesterAcademyPass"
(gdb) set variable p = argv[1]
(gdb) print p
$3 = 0x7ffd23d82067 "hello"
(gdb) c
Continuing.

Welcome to the SLAE 64-bit course! Please proceed to the next video!
[Inferior 1 (process 14885) exited normally]

Reading symbols from gdb_test...
(gdb) disassemble main

GENERAL PURPOSE REGISTER:
$ nasm -felf64 HelloWorld.nasm -o HelloWorld.o
$ ld HelloWorld.o -o HelloWorld 

REDUZE INSTRUCTION SIZE 
REMOVE NULLS
$ cp HelloWorld.nasm HelloWorld-small.nasm

$ objdump -M intel -d HelloWorld
 401000:       b8 01 00 00 00          mov    eax,0x1 

$ nasm -f elf64 HelloWorld-small.nasm -o HelloWorld-small.o
$ ld HelloWorld-small.o -o HelloWorld-small

$ objdump -M intel -d HelloWorld-small.o
 0:   b0 01                   mov    al,0x1

 SAFE MODE:
 $ cp HelloWorld.nasm HelloWorld-shellcodesafe.nasm
 MUDOU ISTO:
 _start:

	;print on screen
	xor rax,	rax
	mov al,		1

$ nasm -f elf64 HelloWorld-shellcodesafe.nasm -o HelloWorld-shellcodesafe.o
$ ld HelloWorld-shellcodesafe.o -o HelloWorld-shellcodesafe

$ objdump -M intel -d HelloWorld-shellcodesafe
0000000000401000 <_start>:
  401000:       48 31 c0                xor    rax,rax
  401003:       b0 01                   mov    al,0x1
 
 

SPCIAL TOKENS:
$ - Evaluates for current line
$$ - Evaluate for beginning of current section

$ nasm -f elf64 DataTypes.nasm -o DataTypes.o
$ ld DataTypes.o -o DataTypes


LEA (Load Efective address) load point value:
gitpod /workspace/kernel/pentesteracadem (main) $ gdb -q ./MovingData-64 -tui

(gdb)set disassembly-flavor intel
(gdb)break _start
(gdb)run
(gdb)layout asm
(gdb)layout regs
(gdb)stepi
(gdb)info variables
(gdb)x/g &sample2
(gdb)x/xg &sample2
(gdb)stepi
(gdb)info variables
(gdb)x/4xb &sample
(gdb)x/4xb &sample

STACK:
Is a temporary location available in a program
Is a LIFO sempre é o primeiro candidato a ser removido

RSP-Register for Stack Pointer

PUSH Colocar dados no Stack
POP Retirar dados do Stack

(gdb)define hook-stop
>x/4xg $rsp
>end
(gdb)
stepi
x/8xb 0x402000 --> 8bytes
x/xg 0x402000  --> exibe valor completo

